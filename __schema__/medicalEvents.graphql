"""
General-purpose FHIR data type described at https://www.hl7.org/fhir/datatypes.html#Coding
A Coding is a representation of a defined concept using a symbol from a defined "code system".
"""
type Coding {
  "Identity of the terminology system"
  system: String!
  "Symbol in syntax defined by the system"
  code: String!
}

"""
General-purpose FHIR data type described at https://www.hl7.org/fhir/datatypes.html#CodeableConcept
A CodeableConcept represents a value that is usually supplied by providing a reference to one or more terminologies or ontologies but may also be defined by the provision of text.
"""
type CodeableConcept {
  "Code defined by a terminology system"
  coding: [Coding]!
  "Plain text representation of the concept"
  text: String
}

"""
General-purpose FHIR data type described at https://www.hl7.org/fhir/datatypes.html#Identifier
A numeric or alphanumeric string that is associated with a single object or entity within a given system.
"""
type Identifier {
  "Description of identifier"
  type: CodeableConcept!
  "The value that is unique"
  value: UUID!
}

"""
Special-purpose FHIR data type described at https://www.hl7.org/fhir/references.html#Reference
Many of the defined elements in a resource are references to other resources. Using these references, the resources combine to build a web of information about healthcare.
"""
type Reference {
  "Text alternative for the resource"
  displayValue: String
  "Logical reference, when literal reference is not known"
  identifier: Identifier!
}

"""
Past list of medical event status codes
"""
type StatusHistory {
  "Status of the medical event"
  status: String!
  "Identifier of the user who changed the status"
  insertedBy: UUID!
  "Date and time when status was changed"
  insertedAt: DateTime!
  "The reason why status was changed. Choses from corresponding dictionary for the medical event"
  statusReason: CodeableConcept
}

"""
Diagnosis representation according to FHIR for some medical events (episode, encounter)
"""
type Diagnosis {
  "Ranking of the diagnosis"
  rank: Int
  "Reference on the Condition resource"
  condition: Reference
  "Role that this diagnosis has within the medical event. Filled from eHealth/diagnosis_roles dictionary"
  role: CodeableConcept
  "Identification of the condition, problem or diagnosis"
  code: CodeableConcept!
}

"""
General-purpose FHIR data type described at https://www.hl7.org/fhir/datatypes.html#Period.
A time period defined by a start and end date/time.
"""
type Period {
  "Starting time with inclusive boundary"
  start: DateTime!
  "End time with inclusive boundary, if not ongoing"
  end: DateTime
}

"""
FHIR type that represent a measured amount. Described at https://www.hl7.org/fhir/datatypes.html#Quantity
"""
type Quantity {
  "Numerical value (with implicit precision)"
  value: Float!
  "< | <= | >= | > | = - how to understand the value"
  comparator: String
  "Unit representation"
  unit: String!
  "System that defines coded unit form"
  system: String
  "Coded form of the unit"
  code: String
}

"""
FHIR type that represent a measured amount without comparator. Described at https://www.hl7.org/fhir/datatypes.html#SimpleQuantity
"""
type SimpleQuantity {
  "Numerical value (with implicit precision)"
  value: Float!
  "Unit representation"
  unit: String
  "System that defines coded unit form"
  system: String
  "Coded form of the unit"
  code: String
}

"""
Type that represent a set of ordered Quantity values defined by a low and high limit, based on Quantity types
"""
type Range {
  "Low limit"
  low: Quantity
  "High limit"
  high: Quantity
}

"""
FHIR type that represent a set of ordered Quantity values defined by a low and high limit. Described at https://www.hl7.org/fhir/datatypes.html#Range
"""
type SimpleRange {
  "Low limit"
  low: SimpleQuantity
  "High limit"
  high: SimpleQuantity
}

"""
FHIR type that comes from a series of measurements taken by a device, which may have upper and lower limits. Described at https://www.hl7.org/fhir/datatypes.html#SampledData
"""
type SampledData {
  "Zero value and units"
  origin: Float
  "Number of milliseconds between samples"
  period: Float
  "Multiply data by this before adding to origin"
  factor: Float
  "Lower limit of detection"
  lowerLimit: Float
  "Upper limit of detection"
  upperLimit: Float
  "Number of sample points at each time point"
  dimensions: Float
  "Decimal values with spaces, or E | U | L"
  data: String!
}

"""
FHIR type that represent a relationship between two Quantity values. Described at https://www.hl7.org/fhir/datatypes.html#Ratio
"""
type Ratio {
  "Numerator value"
  numerator: Quantity!
  "Denominator value"
  denominator: Quantity!
}

"""
Service Request representation in paper form
"""
type PaperReferral {
    "Some notes"
    note: String
    "Requester employee name"
    requesterEmployeeName: String!
    "Requester legal entity edrpou"
    requesterLegalEntityEdrpou: String!
    "Requester legal entity name"
    requesterLegalEntityName: String
    "Service request number"
    requisition: String
    "Service request date"
    serviceRequestDate: String!
}

"""
FHIR type that represent a timing schedule that specifies an event that may occur multiple times. Described at https://www.hl7.org/fhir/datatypes.html#Timing
"""
type Timing {
  "When the event occurs"
  event: [DateTime]
  "When the event is to occur"
  repeat: {
    "Number of times to repeat"
    count: Int
    "Maximum number of times to repeat"
    countMax: Int
    "How long when it happens"
    duration: Float
    "How long when it happens (Max)"
    durationMax: Float
    "A unit of time (units from UCUM)."
    durationUnit: String
    "Event occurs frequency times per period"
    frequency: Int
    "Event occurs up to frequencyMax times per period"
    frequencyMax: Int
    "Event occurs frequency times per period"
    period: Float
    "Upper limit of period (3-4 hours)"
    periodMax: Float
    "A unit of time (units from UCUM)."
    periodUnit: String
    "Days of week the event occurs"
    dayOfWeek: [String]
    "Time of day for action"
    timeOfDay: [String]
    "Code for time period of occurrence"
    when: EventTiming
    "Minutes from event (before or after)"
    offset: Int
    "Length/Range of lengths, or (Start and/or end) limits"
    bounds: TimingBounds
  }
  "Code for a known/defined timing pattern."
  code: CodeableConcept
}

"""
List of time periods of occurrence
"""
enum EventTiming {
  "Event occurs [offset] before a meal (from the Latin ante cibus)"
  AC
  "Event occurs [offset] before lunch (from the Latin ante cibus diurnus)"
  ACD
  "Event occurs [offset] before breakfast (from the Latin ante cibus matutinus)"
  ACM
  "Event occurs [offset] before dinner (from the Latin ante cibus vespertinus)"
  ACV
  "Event occurs at a meal (from the Latin cibus)"
  C
  "Event occurs at lunch (from the Latin cibus diurnus)"
  CD
  "Event occurs at breakfast (from the Latin cibus matutinus)"
  CM
  "Event occurs at dinner (from the Latin ante cibus vespertinus)"
  CV
  "Event occurs [offset] before the hour of sleep (or trying to)"
  HS
  "Event occurs [offset] after a meal (from the Latin post cibus)"
  PC
  "Event occurs [offset] after lunch (from the Latin post cibus diurnus)"
  PCD
  "Event occurs [offset] after breakfast (from the Latin post cibus matutinus)"
  PCM
  "Event occurs [offset] after dinner (from the Latin post cibus vespertinus)"
  PCV
  "Event occurs [offset] after waking"
  WAKE
}

"""
The union represents Length/Range of lengths, or (Start and/or end) limits.
Duration as SimpleQuantity, Range as SimpleRange.
"""
union TimingBounds = SimpleQuantity | SimpleRange | Period
