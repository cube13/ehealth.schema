# import Address from "addresses.graphql"
# import Phone from "phones.graphql"
# import Phone from "persons.graphql"

"""
Methods to use when ordering `Merge Request`.
"""
enum MergeRequestOrderBy {
  "Sort Person by inserted at in ascending order."
  INSERTED_AT_ASC
  "Sort Person by inserted at in descending order."
  INSERTED_AT_DESC
  "Sort Person by birth date in ascending order."
  STATUS_ASC
  "Sort Person by birth date in descending order."
  STATUS_DESC
}

"""
A connection to a list of `MergeRequest` values.
"""
type MergeRequestConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Flag which shows whether NEW merge candidate can be assigned to the User"
  canAssignNew: Boolean!
  "A list of nodes."
  nodes: [MergeRequest]
  "A list of edges."
  edges: [MergeRequestEdge]
}

"""
Reads and enables pagination through a set of `MergeRequest`.
"""
type MergeRequestEdge {
  "The item at the end of the edge."
  node: MergeRequest!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Fields to filter `ManualMergeCandidate` in the system
"""
input ManualMergeCandidateFilter {
  "Perform search by master person identifier."
  masterPersonId: UUID
  "Perform search by merge person identifier."
  personId: UUID
  "Perform search by status of `ManualMergeCandidate`."
  status: ManualMergeCandidateStatus
  "Perform search by assignee who is proccessing `ManualMergeCandidate` at the moment"
  assigneeId: UUID
}

"""
Methods to use when ordering `ManualMergeCandidate`.
"""
enum ManualMergeCandidateOrderBy {
  "Sort by inserted at in ascending order."
  INSERTED_AT_ASC
  "Sort by inserted at in descending order."
  INSERTED_AT_DESC
  "Sort by status in ascending order."
  STATUS_ASC
  "Sort by status in descending order."
  STATUS_DESC
}

"""
A connection to a list of `ManualMergeCandidate` values.
"""
type ManualMergeCandidateConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [ManualMergeCandidate]
  "A list of edges."
  edges: [ManualMergeCandidateEdge]
}

"""
Reads and enables pagination through a set of `ManualMergeCandidate`.
"""
type ManualMergeCandidateEdge {
  "The item at the end of the edge."
  node: ManualMergeCandidate!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Input for `assignMergeCandidate` mutation.
"""
input AssignMergeCandidateInput {
  "Primary key identifier from the database for `ManualMergeCandidate`"
  manualMergeCandidateId: UUID
}

"""
Return type for `assignMergeCandidate` mutation.
"""
type AssignMergeCandidatePayload {
  "Information of pair of persons which can be same."
  mergeRequest: MergeRequest!
}

"""
Input for `updateMergeRequest` mutation.

In order to update status user must have a scope `merge_request:write`
"""
input UpdateMergeRequestInput {
  "Primary key identifier from the database"
  id: ID!
  "next status of merge request"
  status: MergeRequestStatus!
  "comment which user can leave"
  comment: String
}

"""
Return type for `updateMergeRequest` mutation.
"""
type UpdateMergeRequestPayload {
  "Information of pair of persons which can be same."
  mergeRequest: MergeRequest!
}

"""
This is Merge Request details. In order to obtain details user must have a scope **merge_request:read**
"""
type MergeRequest implements Node {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "The pair of persons which is considerated to be the same person"
  manualMergeCandidate: ManualMergeCandidate!
  "status of merge request"
  status: MergeRequestStatus!
  "comment which user can leave"
  comment: String
  "Technical information when the patient was inserted into the DB."
  insertedAt: DateTime!
  "Technical information when the patient was updated in the DB."
  updatedAt: DateTime!
}

"""
List of MergeRequest statuses.
"""
enum MergeRequestStatus {
  "Status `MERGE` for a merge request"
  MERGE
  "Status `NEW` for a merge request"
  NEW
  "Status `POSTPONE` for a merge request"
  POSTPONE
  "Status `SPLIT` for a merge request"
  SPLIT
  "Status `TRASH` for a merge request"
  TRASH
}

"""
Information about Manual Merge Candidate.
"""
type ManualMergeCandidate {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "The pair of persons which is considerated to be the same person"
  mergeCandidate: MergeCandidate!
  "status of merge candidate"
  status: ManualMergeCandidateStatus
  "Technical information when the patient was inserted into the DB."
  insertedAt: DateTime!
  "Technical information when the patient was updated in the DB."
  updatedAt: DateTime!
  "User who is proccessing current candidate at the moment"
  assigneeId: UUID
  "Merge decision for already processed candidate"
  decision: ManualMergeCandidateDecision
}

"""
Information about Merge Candidate.
"""
type MergeCandidate {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "The person wich will be deactivated"
  person: Person!
  "The person wich will remain"
  masterPerson: Person!
}

"""
List of Merge candidate statuses
"""
enum ManualMergeCandidateStatus {
  "Status `NEW` for a merge request"
  NEW
  "Status `PROCESSED` for a merge request"
  PROCESSED
}

"""
List of ManualMergeCandidate decisions.
"""
enum ManualMergeCandidateDecision {
  "Decision `MERGE` for a manual merge candidate"
  MERGE
  "Decision `SPLIT` for a manual merge candidate"
  SPLIT
  "Decision `TRASH` for a manual merge candidate"
  TRASH
}
