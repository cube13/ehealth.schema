"""
A condition to be used against `AuthenticationMethod` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PersonAuthenticationMethodFilter {
  "Checks for nullability with the object’s `endedAt` field."
  isEnded: Boolean
  "Checks for equality with the object’s `isActive` field."
  isActive: Boolean
  "Checks for inclusion in the list with the object’s `type` field. The values should be present in the `AUTHENTICATION_METHOD` dictionary."
  type: [String]
}

"""
Methods to use when ordering `PersonAuthenticationMethod`.
"""
enum PersonAuthenticationMethodOrderBy {
  "Orders by the object’s `insertedAt` field in the ascending order."
  INSERTED_AT_ASC
  "Orders by the object’s `insertedAt` field in the descending order."
  INSERTED_AT_DESC
}

"""
A connection to a list of `PersonAuthenticationMethod` values.
"""
type PersonAuthenticationMethodConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [PersonAuthenticationMethod]
  "A list of edges."
  edges: [PersonAuthenticationMethodEdge]
}

"""
Reads and enables pagination through a set of `PersonAuthenticationMethod`.
"""
type PersonAuthenticationMethodEdge {
  "The item at the end of the edge."
  node: PersonAuthenticationMethod!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Describes authentication method of a `Person`.
"""
type PersonAuthenticationMethod implements Node {
  "The ID of an object."
  id: ID!
  "Primary key identifier from the database."
  databaseId: UUID!
  "Type of auth method"
  type: String!
  "Phone number of person (present when `type` is `\"OTP\"`)."
  phoneNumber: String
  "References third person (present when `type` is `\"THIRD_PERSON\"`)."
  thirdPerson: Person
  "Date and time when the `PersonAuthenticationMethod` started."
  startedAt: DateTime
  "Date and time when the `PersonAuthenticationMethod` ended."
  endedAt: DateTime
  "Whether the `PersonAuthenticationMethod` is active or not?"
  isActive: Boolean!
  "Date and time when record was inserted."
  insertedAt: DateTime!
  "Date and time when record was updated."
  updatedAt: DateTime!
}
  
"""
Input for `createAuthMethRequestForPerson` mutation.

In order to Create/Update/Deactivate patient authentication methods user must have a scope `authentication_method_request:write_nhs`
"""
input createAuthMethRequestForPersonInput {
  "Primary key identifier from the database"
  personId: ID!
  "The ID of an authentication method (mandatory when action `\"UPDATE\"` and `\"DEACTIVATE\"`, for `\"INSERT\"` - absent)"
  id: ID!
  "Action"
  action: AuthMethRequestAction!
  "Alias name. I.e. `\"Father\"`, `\"Mother\"`"
  alias: String
  "Phone number of person (mandatory for action `\"INSERT\"` and when `type` is `\"OTP\"`)."
  phoneNumber: String
  "ID of a Third Person (mandatory for action `\"INSERT\"`. when `type` is `\"THIRD_PERSON\"` authentication method. For types `\"OTP\"` and `\"OFFLINE\"` it should not be defined"
  value: ID
  "Type of authentication method created (mandatory when action is `\"INSERT\"`)."
  type: AuthMethType
}

"""
Actions which user can use to Create/Update/Deactivate authenticatin methods of a Person
"""

enum AuthMethRequestAction {
  "Action for Creation of an auth method"
  INSERT
  "Action for Update of a certain auth method"
  UPDATE
  "Action for Deactivation of a certain auth method"
  DEACTIVATE

}

"""
Type of authentication/authorisation methods which Person can use.
This types exist in the `AUTHENTICATION_METHOD` dictionary.
"""

enum AuthMethType {
  "Online authentication method. OTP and OFFLINE cannot be togeather "
  OTP
  "Offline authentication method. OTP and OFFLINE cannot be togeather"
  OFFLINE
  "Authentication using authentication methods of a Third person"
  THIRD_PERSON

}

"""
Return type for `createAuthMethRequestForPerson` mutation. User must have a scope `authentication_method_request:read
"""
type createAuthMethRequestForPersonPayload {
  "Authentication method of a Person"
  authenticationMethod: PersonAuthenticationMethod!
}